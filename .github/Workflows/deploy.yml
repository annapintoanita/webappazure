name: 38_ProveWebAppD
on:
  push:
    branches:
      - main  # Il workflow si attiva quando viene eseguito un push su "main"

jobs:
  build:
    runs-on: ubuntu-latest  # Esegue il workflow su un runner Linux

    steps:
     - name: Checkout repository
       uses: actions/checkout@v3  # Clona il repository Github

     - name: Login to Docker Hub
       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  # Login a Docker Hub

     - name: Build and Push Docker Hub
       run: |
         docker build -t ${{ secrets.DOCKER_USERNAME }}/38_provewebappd .  # Crea l'immagine Docker
         docker tag ${{ secrets.DOCKER_USERNAME }}/38_provewebappd ${{ secrets.DOCKER_USERNAME }}/38_provewebappd:latest  # Tagga l'immagine
         docker push ${{ secrets.DOCKER_USERNAME }}/38_provewebappd:latest  # Pusha l'immagine su Docker Hub

  deploy:
    runs-on: ubuntu-latest  # Esegue il workflow su un runner Linux
    needs: build  # Il deploy inizia solo dopo che il job "build" Ã¨ completato

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Usa la chiave di accesso AWS da Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Usa la chiave segreta AWS da Secrets
          aws-region: us-east-1  # Modifica la regione in base alla tua configurazione AWS

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/38_provewebappd:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/38_provewebappd:latest

      - name: Deploy to ECS
        run: |
          # Registra una nuova task definition su ECS
          ecs-cli compose --file docker-compose.yml --project-name 38_provewebappd service up --create-log-groups
          
          # Esegui il deploy su ECS
          aws ecs update-service --cluster 38_provewebappd-cluster --service 38_provewebappd-service --force-new-deployment
